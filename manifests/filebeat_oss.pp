# Copyright (C) 2015, Wazuh Inc.
# Setup for Filebeat_oss
# @param indexer_ip
#   Indexer IP for single deployments.
# @param indexer_port
#   Indexer port.
# @param indexers
#   Optional list of indexer URLs. https://IP:Port
#   Use this if you have a cluster setup.
# @param enable_archives
#   Enables log archiving.
# @param package
#   Name of the filebeat package.
# @param service
#   Name of the filebeat service.
# @param elastic_user
#   Name of the user to use for authenticating against the wazuh-indexer.
# @param elastic_password
#   Password of that user.
# @param filebeat_oss_version
#   Filebeat version to install.
# @param wazuh_app_version
#   Unused at the moment.
# @param wazuh_extensions_version
#   Defines the git tag to use when downloading the filebeat template.
# @param wazuh_filebeat_module
#   Tar.gz. to use for the filebeat module.
# @param wazuh_node_name
#   Name of the node. This should match the name of the certificates for this node.
# @param filebeat_fileuser
# @param filebeat_filegroup
# @param filebeat_path_certs
#  Cert dir for filebeat. 
# @param cert_dir
#   Cert dir / root containing the certificates generated by the crt-tool.
# @param template_repo
#   Link to wazuh repo or a mirror.
# @param module_repo
#   Wazuh module repo URL
class wazuh::filebeat_oss (
  String $indexer_ip = '127.0.0.1',
  Stdlib::Port $indexer_port = 9200,
  Array[String] $indexers = ["https://${$indexer_ip}:${indexer_port}"],

  Boolean $enable_archives = false,
  String $package = 'filebeat',
  String $service = 'filebeat',
  String $elastic_user = 'admin',
  String $elastic_password = 'admin',
  # Not touching those to avoid merge conflicts for now
  $filebeat_oss_version = '7.10.2-1',
  $wazuh_app_version = '4.13.1_7.10.2',
  $wazuh_extensions_version = 'v4.13.1',
  $wazuh_filebeat_module = 'wazuh-filebeat-0.4.tar.gz',
  String $wazuh_node_name = 'master',

  String $filebeat_fileuser = 'root',
  String $filebeat_filegroup = 'root',
  String $filebeat_path_certs = '/etc/filebeat/certs',

  Stdlib::Absolutepath $cert_dir = '/etc/wazuh-certs',

  String $template_repo = 'https://raw.githubusercontent.com/wazuh/wazuh',
  String $module_repo = 'https://packages.wazuh.com/4.x/filebeat',
) {
  if $facts['os']['family'] == 'Debian' {
    apt::pin { 'filebeat':
      packages => $package,
      priority => 1001,
      version  => $filebeat_oss_version,
    }
  }
  package { $package:
    ensure => $filebeat_oss_version,
  }

  # Todo versionlock for rhel

  $config = {
    'filebeat.modules'            => [
      {
        'module'   => 'wazuh',
        'alerts'   => { 'enabled' => true },
        'archives' => { 'enabled' => $enable_archives },
      },
    ],
    'setup.template.json.enabled' => true,
    'setup.template.json.path'    => '/etc/filebeat/wazuh-template.json',
    'setup.template.json.name'    => 'wazuh',
    'setup.template.overwrite'    => true,
    # Send events directly to Indexer
    'output.elasticsearch'        => {
      'hosts'                       => $indexers,
      'username'                    => $elastic_user,
      'password'                    => $elastic_password,
      'protocol'                    => 'https',
      'ssl.certificate_authorities' => ['/etc/filebeat/certs/root-ca.pem'],
      'ssl.certificate'             => '/etc/filebeat/certs/filebeat.pem',
      'ssl.key'                     => '/etc/filebeat/certs/filebeat-key.pem',
    },
    'setup.ilm.enabled'           => false,
    'logging.metrics.enabled'     => false,
    'seccomp'                     => {
      'default_action' => 'allow',
      'syscalls'       => [
        {
          'action' => 'allow',
          'names'  => ['rseq'],
        }
      ],
    },
  }

  file { '/etc/filebeat/filebeat.yml':
    owner     => 'root',
    group     => 'root',
    mode      => '0640',
    notify    => Service['filebeat'], ## Restarts the service
    content   => stdlib::to_yaml($config),
    # Might contain passwords.
    show_diff => false,
    require   => Package[$package],
  }

  # work around:
  #  Use cmp to compare the content of local and remote file. When they differ than rm the file to get it recreated by the file resource.
  #  Needed since GitHub can only ETAG and result in changes of the mtime everytime.
  # todo for both. Hash verification. / Mirroring
  exec { 'cleanup /etc/filebeat/wazuh-template.json':
    path    => ['/usr/bin', '/bin', '/usr/sbin', '/sbin'],
    command => 'rm -f /etc/filebeat/wazuh-template.json',
    onlyif  => 'test -f /etc/filebeat/wazuh-template.json',
    # lint:ignore:140chars
    unless  => "curl -s '${template_repo}/${wazuh_extensions_version}/extensions/elasticsearch/7.x/wazuh-template.json' | cmp -s '/etc/filebeat/wazuh-template.json'",
    # lint:endignore
  }
  -> file { '/etc/filebeat/wazuh-template.json':
    owner   => 'root',
    group   => 'root',
    mode    => '0440',
    replace => false,  # only copy content when file not exist
    source  => "${template_repo}/${wazuh_extensions_version}/extensions/elasticsearch/7.x/wazuh-template.json",
    notify  => Service['filebeat'],
    require => Package['filebeat'],
  }

  archive { "/tmp/${$wazuh_filebeat_module}":
    ensure       => present,
    source       => "${module_repo}/${$wazuh_filebeat_module}",
    extract      => true,
    extract_path => '/usr/share/filebeat/module',
    creates      => '/usr/share/filebeat/module/wazuh',
    cleanup      => true,
    notify       => Service['filebeat'],
    require      => Package['filebeat'],
  }

  file { '/usr/share/filebeat/module/wazuh':
    ensure  => 'directory',
    mode    => '0755',
    require => Package['filebeat'],
  }

  exec { "ensure full path of ${filebeat_path_certs}":
    path    => '/usr/bin:/bin',
    command => "mkdir -p ${filebeat_path_certs}",
    creates => $filebeat_path_certs,
    require => Package['filebeat'],
  }
  -> file { $filebeat_path_certs:
    ensure => directory,
    owner  => $filebeat_fileuser,
    group  => $filebeat_filegroup,
    mode   => '0500',
  }

  $_certfiles = {
    "${wazuh_node_name}.pem"     => 'filebeat.pem',
    "${wazuh_node_name}-key.pem" => 'filebeat-key.pem',
    'root-ca.pem'                => 'root-ca.pem',
  }
  $_certfiles.each |String $certfile_source, String $certfile_target| {
    file { "${filebeat_path_certs}/${certfile_target}":
      ensure    => file,
      owner     => $filebeat_fileuser,
      group     => $filebeat_filegroup,
      mode      => '0400',
      replace   => true,
      recurse   => remote,
      # todo same cert fallback... replace with exported resource
      source    => "${cert_dir}/${certfile_source}",
      show_diff => false,
    }
  }

  service { 'filebeat':
    ensure  => running,
    enable  => true,
    name    => $service,
    require => Package['filebeat'],
  }
}
